reactor Mult( c: cell int, in : stream int) {
    out: stream int = c + in;
}

reactor Pipeline(cfg: stream int, in: stream int) {
    //s1: cell Mult = Mult(1, in)     .. Mult(cfg if stage==1, in);
    //s2: cell Mult = Mult(1, s1.out) .. Mult(cfg if stage==2, s1.out);
    //s3: cell Mult = Mult(1, s2.out) .. Mult(cfg if stage==3, s2.out);
    //s4: cell Mult = Mult(1, s3.out) .. Mult(cfg if stage==4, s3.out);
    //s5: cell Mult = Mult(1, s4.out) .. Mult(cfg if stage==5, s4.out);
    //s6: cell Mult = Mult(1, s5.out) .. Mult(cfg if stage==6, s5.out);

    s6: cell Mult = Mult(1, s5.out) .. Mult(cfg, s5.out)  if stage==6;
    s5: cell Mult = Mult(1, s4.out) .. Mult(cfg, s4.out)  if stage==5;
    s4: cell Mult = Mult(1, s3.out) .. Mult(cfg, s3.out)  if stage==4;
    s3: cell Mult = Mult(1, s2.out) .. Mult(cfg, s2.out)  if stage==3;
    s2: cell Mult = Mult(1, s1.out) .. Mult(cfg, s1.out)  if stage==2;
    s1: cell Mult = Mult(1, in)     .. Mult(cfg, in)      if stage==1;
    out: stream int = s6.out;
private:
    stage: cell int = 0 .. ~stage + 1 @ cfg;
    C: cell int = 0 .. cfg;
properties:
    bounded: (G (0<=C and C<10)) -> not F ( (in==1) and
                                            (out/in > 60) );
}