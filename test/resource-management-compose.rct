struct Command {
    worker_id: int,
    request: bool,
    query: bool,
    disconnect: bool
}

struct Response {
    worker_id: int,
    reply: bool,
    disconnect: bool
}

reactor Worker(id: cell int, input: stream Command) {
    assigned:  stream int      = ID if input.request and not busy;
    released:  stream int      = ID if myCommand.disconnect;
    unhandled: stream Command  = input if not (active(assigned) or active(myCommand));

    ID: cell int = id .. 1 @ input if false;
private:
    busy: cell bool = false .. true  @ assigned
                             | false @ released;
    myCommand: stream Command = input if busy and input.worker_id == ID and not input.request;
}

function simultaneous(a: bool, b: bool, c: bool) -> bool {
    result == ((a and b) or (b and c) or (a and c));
}

reactor manager(input: stream Command, input2: cell int) {
    resource_unavailable: stream bool = active(unhandled) if unhandled.request;
private:

    workerA: cell Worker = Worker(0, input);
    workerB: cell Worker = Worker(1, workerA.unhandled);
    workerC: cell Worker = Worker(2, workerB.unhandled);

    assigned_worker_id: stream int = workerA.assigned | workerB.assigned | workerC.assigned;
    released_worker_id: stream int = workerA.released | workerB.released | workerC.released;

    unhandled: stream Command = workerC.unhandled;

    count: cell int = 0 .. count + ( 1 @ assigned_worker_id
                                   |-1 @ released_worker_id);
properties:
    valid: G (active(resource_unavailable) => (count == 2));

    diligent: G not simultaneous (input.request, input.query, input.disconnect) =>
                  G (resource_unavailable => (count==4));
    //orderly: G not simultaneous (input.request, input.query, input.disconnect) =>
    //              G ((workerA.response.reply) => ((not workerA.response.disconnect) S (assigned_worker_id==workerA.ID)));
}