type Command {
    Request
  | Query       { id: int }
  | Disconnect  { id: int }
}

type Response {
    Reply      { id: int }
  | Disconnect { id: int }
}

reactor AbstractWorker {
    response: Stream Response;
}

reactor Worker(id:       int,
               input:    stream Command,
               assigned: stream unit,
               released: stream unit) {
    response: stream Response = Response::Reply(id) when x == ID
                                    when input matches Command.Query(x);

private:
    ID: cell int = id;
}

reactor manager(input: stream Command) {
    resource_unavailable: stream bool = true when
                          unhandled matches Command::Request;
private:

    workerA: cell AbstractWorker = Worker(0, input);
    workerB: cell AbstractWorker = Worker(1, input);
    workerC: cell AbstractWorker = Worker(2, input);

    requests: stream Command::Request = input when input matches Command::Request;
    assigned_worker: stream Worker = workerA @ requests unless workerA.busy
                                   | workerB @ requests unless workerB.busy
                                   | workerC @ requests unless workerC.busy;

    assigned_worker_id: stream int = workerA.assigned | workerB.assigned | workerC.assigned;
    released_worker_id: stream int = workerA.released | workerB.released | workerC.released;

    unhandled: stream Command = input when workerA.response

    count: cell int = 0 .. count + ( 1 @ assigned_worker_id
                                   |-1 @ released_worker_id);
properties:
    valid: G (resource_unavailable -> (count == 3));

    diligent: G (resource_unavailable => (count==3));
}