datatype AuthRelease {
    requesterID  : int,
    recipientID  : int,
    subjectID    : int,
    recordID     : int
}

datatype AuthOwnRecordFor {
    recipientID  : int,
    subjectID    : int,
    recordID     : int
}

datatype RequestAuthRelease{
    requesterID  : int,
    recipientID  : int,
    subjectID    : int,
    recordID     : int
}

function PHI(recordID : int) -> bool {}

function originator(recordID : int) -> int {}

reactor Authorizer(ownAuths     : stream AuthOwnRecordFor,
                   authRequests : stream RequestAuthRelease) {

    auths : stream AuthRelease
        = AuthRelease(authRequests.requesterID,
                      authRequests.recipientID,
                      authRequests.subjectID,
                      authRequests.recordID)
          if active(list.authorized) or
             not PHI(authRequests.recordID) or
             originator(authRequests.recordID) == authRequests.requesterID;

private:
    list: const AuthorizedList = AuthorizedList(ownAuths,authRequests);
}

reactor Patient {
    id : const int = uuid();
    auths : stream AuthOwnRecordFor
        = AuthOwnRecordFor(recipientID,
                           id,
                           recordID);
private:
    recipientID : stream int; // unconstrained
    recordID    : stream int; // unconstrained
}

reactor Provider {
    id       : const int = uuid();
    requests : stream RequestAuthRelease
        = RequestAuthRelease(id,
                             recipientID,
                             subjectID,
                             recordID);
private:
    recipientID  : stream int; // unconstrained
    subjectID    : stream int; // unconstrained
    recordID     : stream int; // unconstrained
}

function ownerAuth(auth : AuthOwnRecordFor, patientID: int ) -> bool {
     result == ((auth.recipientID == 42)
            and (auth.subjectID   == patientID)
            and (auth.recordID    == 24));
}

function providerRequest(request: RequestAuthRelease, patientID: int) -> bool {
    result == ((request.subjectID   == patientID)
           and (request.recipientID == 42)
           and (request.recordID    == 24));
}

function authorizerGrant(release: AuthRelease, patientID: int) -> bool {
    result == ((release.subjectID   == patientID)
           and (release.recipientID == 42)
           and (release.recordID    == 24));
}

reactor EMRS {
    patients   : const Patients   = Patients();
    providers  : const Providers  = Providers();
    authorizer : const Authorizer = Authorizer(patients.auths,
                                               providers.requests);
private:

    ownerAuthorizedRelease  : stream bool
        = ownerAuth(patients.auths, patients.patient1.id);

    providerRequestsRelease : stream bool
        = providerRequest(providers.requests, patients.patient1.id);

    releaseAuthorized       : stream bool
        = authorizerGrant(authorizer.auths, patients.patient1.id);

    containsPHI             : stream bool
        = PHI(providers.requests.recordID);

    originatorRequested     : stream bool
        = originator(providers.requests.recordID) == providers.requests.requesterID;

properties:
    authorized:
        G (releaseAuthorized -> ((not containsPHI)     or
                                  originatorRequested  or
                                 (P ownerAuthorizedRelease)));
    honored:
        G (ownerAuthorizedRelease ->
            ( G (providerRequestsRelease -> releaseAuthorized)));
}

function authorizes(request : RequestAuthRelease,
                    record  : AuthOwnRecordFor) -> bool {
    result == ((record.subjectID == request.subjectID) and
               (record.recipientID == request.recipientID) and
               (record.recordID == request.recordID));
}


reactor AuthorizedList(auth:    stream AuthOwnRecordFor,
                       request: stream RequestAuthRelease){

    authorized: stream RequestAuthRelease =
        request if (((num_authorized>0) and authorizes(request, record1))
                or  ((num_authorized>1) and authorizes(request, record2))
                or  ((num_authorized>2) and authorizes(request, record3)));
                //or  ((num_authorized>3) and authorizes(request, record4))
                //or  ((num_authorized>4) and authorizes(request, record5))
                //or  ((num_authorized>5) and authorizes(request, record6))
                //or  ((num_authorized>6) and authorizes(request, record7))
                //or  ((num_authorized>7) and authorizes(request, record8))
                //or  ((num_authorized>8) and authorizes(request, record9))
                //or  ((num_authorized>9) and authorizes(request, record10)));
private:
    record1:  cell AuthOwnRecordFor = empty .. auth if num_authorized==1;
    record2:  cell AuthOwnRecordFor = empty .. auth if num_authorized==2;
    record3:  cell AuthOwnRecordFor = empty .. auth if num_authorized==3;
    //record4:  cell AuthOwnRecordFor = empty .. auth if num_authorized==4;
    //record5:  cell AuthOwnRecordFor = empty .. auth if num_authorized==5;
    //record6:  cell AuthOwnRecordFor = empty .. auth if num_authorized==6;
    //record7:  cell AuthOwnRecordFor = empty .. auth if num_authorized==7;
    //record8:  cell AuthOwnRecordFor = empty .. auth if num_authorized==8;
    //record9:  cell AuthOwnRecordFor = empty .. auth if num_authorized==9;
    //record10: cell AuthOwnRecordFor = empty .. auth if num_authorized==10;

    empty: const AuthOwnRecordFor = AuthOwnRecordFor(0,0,0);

    num_authorized: cell int = 0 .. ~num_authorized + 1 @ auth;
}

reactor Patients {

    auths: stream AuthOwnRecordFor = patient1.auths
                                   | patient2.auths
                                   | patient3.auths
                                   | patient4.auths
                                   | patient5.auths
                                   | patient6.auths
                                   | patient7.auths
                                   | patient8.auths
                                   | patient9.auths
                                   | patient10.auths;

    patient1: const Patient  = Patient();
    patient2: const Patient  = Patient();
    patient3: const Patient  = Patient();
    patient4: const Patient  = Patient();
    patient5: const Patient  = Patient();
    patient6: const Patient  = Patient();
    patient7: const Patient  = Patient();
    patient8: const Patient  = Patient();
    patient9: const Patient  = Patient();
    patient10: const Patient  = Patient();
}

reactor Providers {

    requests: stream RequestAuthRelease
        = provider1.requests
        | provider2.requests
        | provider3.requests
        | provider4.requests
        | provider5.requests
        | provider6.requests
        | provider7.requests
        | provider8.requests
        | provider9.requests
        | provider10.requests;

private:
    provider1: const Provider  = Provider();
    provider2: const Provider  = Provider();
    provider3: const Provider  = Provider();
    provider4: const Provider  = Provider();
    provider5: const Provider  = Provider();
    provider6: const Provider  = Provider();
    provider7: const Provider  = Provider();
    provider8: const Provider  = Provider();
    provider9: const Provider  = Provider();
    provider10: const Provider  = Provider();
}
